//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace BonusApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBonusClient
    {
        /// <summary>
        /// Списание бонусных баллов оператором
        /// <br/>Возращает число списанных оператором бонусов.
        /// <br/>Оператор не может списывать бонусы в минус
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> BalancePayManualAsync(PayManualRequestDto body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Списание бонусных баллов оператором
        /// <br/>Возращает число списанных оператором бонусов.
        /// <br/>Оператор не может списывать бонусы в минус
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> BalancePayManualAsync(PayManualRequestDto body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Списание бонусных баллов сервисом оплаты
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> BalancePayAsync(PayRequestDto body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Списание бонусных баллов сервисом оплаты
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> BalancePayAsync(PayRequestDto body, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Получить баланс пользователя по всем валютам
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPersonBalanceResponseDto> BalanceGetAllAsync(string personId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получить баланс пользователя по всем валютам
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetPersonBalanceResponseDto> BalanceGetAllAsync(string personId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Получить баланс пользователя по конкретной валюте
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> BalanceGetAsync(string personId, int bankId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Получить баланс пользователя по конкретной валюте
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> BalanceGetAsync(string personId, int bankId, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Начисление бонусных баллов оператором
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BalanceAccrualManualAsync(AccrualManualRequestDto body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Начисление бонусных баллов оператором
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BalanceAccrualManualAsync(AccrualManualRequestDto body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgramLevel> BonusLevelsGetByIdAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgramLevel> BonusLevelsGetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BonusProgramLevel>> BonusLevelsGetAllAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BonusProgramLevel>> BonusLevelsGetAllAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgramLevel> BonusLevelsAddAsync(BonusProgramLevel body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgramLevel> BonusLevelsAddAsync(BonusProgramLevel body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BonusLevelsUpdateAsync(BonusProgramLevelDto body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BonusLevelsUpdateAsync(BonusProgramLevelDto body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BonusLevelsDeleteByIdAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BonusLevelsDeleteByIdAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgramAchievementResponse> BonusProgramGetPersonAchievementAsync(string personId);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgramAchievementResponse> BonusProgramGetPersonAchievementAsync(string personId, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgram> BonusProgramGetByIdAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgram> BonusProgramGetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BonusProgram>> BonusProgramGetAllAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<BonusProgram>> BonusProgramGetAllAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgram> BonusProgramAddAsync(BonusProgram body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgram> BonusProgramAddAsync(BonusProgram body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BonusProgramUpdateAsync(BonusProgramDto body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BonusProgramUpdateAsync(BonusProgramDto body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BonusProgramDeleteByIdAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task BonusProgramDeleteByIdAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgramAchievementResponse> BonusProgramRestartJobsAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BonusProgramAchievementResponse> BonusProgramRestartJobsAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OwnerMaxBonusPay> OwnerMaxBonusPayGetByIdAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OwnerMaxBonusPay> OwnerMaxBonusPayGetByIdAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OwnerMaxBonusPay>> OwnerMaxBonusPayGetAllAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OwnerMaxBonusPay>> OwnerMaxBonusPayGetAllAsync(System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OwnerMaxBonusPay> OwnerMaxBonusPayAddAsync(OwnerMaxBonusPay body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OwnerMaxBonusPay> OwnerMaxBonusPayAddAsync(OwnerMaxBonusPay body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OwnerMaxBonusPayUpdateAsync(OwnerByPayDto body);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OwnerMaxBonusPayUpdateAsync(OwnerByPayDto body, System.Threading.CancellationToken cancellationToken);

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OwnerMaxBonusPayDeleteByIdAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OwnerMaxBonusPayDeleteByIdAsync(int id, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccrualManualRequestDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _personId = default!;
        private int _bankId = default!;
        private long _bonusSum = default!;
        private string _description = default!;
        private string _transactionId = default!;

        [System.Text.Json.Serialization.JsonPropertyName("personId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string PersonId
        {
            get { return _personId; }

            set
            {
                if (_personId != value)
                {
                    _personId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bonusSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long BonusSum
        {
            get { return _bonusSum; }

            set
            {
                if (_bonusSum != value)
                {
                    _bonusSum = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string TransactionId
        {
            get { return _transactionId; }

            set
            {
                if (_transactionId != value)
                {
                    _transactionId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AccrualManualRequestDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AccrualManualRequestDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BalanceResponseItemDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _bankId = default!;
        private long? _sum = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("sum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? Sum
        {
            get { return _sum; }

            set
            {
                if (_sum != value)
                {
                    _sum = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BalanceResponseItemDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BalanceResponseItemDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgram : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id = default!;
        private string? _name = default!;
        private BonusProgramType? _bonusProgramType = default!;
        private string? _description = default!;
        private System.DateTimeOffset? _dateStart = default!;
        private System.DateTimeOffset? _dateStop = default!;
        private int? _bankId = default!;
        private string? _executionCron = default!;
        private FrequencyTypes? _frequencyType = default!;
        private int? _frequencyValue = default!;
        private System.DateTimeOffset? _lastUpdated = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name
        {
            get { return _name; }

            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bonusProgramType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BonusProgramType? BonusProgramType
        {
            get { return _bonusProgramType; }

            set
            {
                if (_bonusProgramType != value)
                {
                    _bonusProgramType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("dateStart")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateStart
        {
            get { return _dateStart; }

            set
            {
                if (_dateStart != value)
                {
                    _dateStart = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("dateStop")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateStop
        {
            get { return _dateStop; }

            set
            {
                if (_dateStop != value)
                {
                    _dateStop = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("executionCron")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExecutionCron
        {
            get { return _executionCron; }

            set
            {
                if (_executionCron != value)
                {
                    _executionCron = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("frequencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FrequencyTypes? FrequencyType
        {
            get { return _frequencyType; }

            set
            {
                if (_frequencyType != value)
                {
                    _frequencyType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("frequencyValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? FrequencyValue
        {
            get { return _frequencyValue; }

            set
            {
                if (_frequencyValue != value)
                {
                    _frequencyValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? LastUpdated
        {
            get { return _lastUpdated; }

            set
            {
                if (_lastUpdated != value)
                {
                    _lastUpdated = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgram FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgram>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgramAchievementDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id = default!;
        private string? _name = default!;
        private BonusProgramType? _bonusProgramType = default!;
        private string? _description = default!;
        private System.DateTimeOffset? _dateStart = default!;
        private System.DateTimeOffset? _dateStop = default!;
        private int? _bankId = default!;
        private string? _executionCron = default!;
        private FrequencyTypes? _frequencyType = default!;
        private int? _frequencyValue = default!;
        private System.Collections.Generic.ICollection<BonusProgramAchievementLevelDto>? _programLevels = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name
        {
            get { return _name; }

            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bonusProgramType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BonusProgramType? BonusProgramType
        {
            get { return _bonusProgramType; }

            set
            {
                if (_bonusProgramType != value)
                {
                    _bonusProgramType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("dateStart")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateStart
        {
            get { return _dateStart; }

            set
            {
                if (_dateStart != value)
                {
                    _dateStart = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("dateStop")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateStop
        {
            get { return _dateStop; }

            set
            {
                if (_dateStop != value)
                {
                    _dateStop = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("executionCron")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExecutionCron
        {
            get { return _executionCron; }

            set
            {
                if (_executionCron != value)
                {
                    _executionCron = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("frequencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FrequencyTypes? FrequencyType
        {
            get { return _frequencyType; }

            set
            {
                if (_frequencyType != value)
                {
                    _frequencyType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("frequencyValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? FrequencyValue
        {
            get { return _frequencyValue; }

            set
            {
                if (_frequencyValue != value)
                {
                    _frequencyValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("programLevels")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<BonusProgramAchievementLevelDto>? ProgramLevels
        {
            get { return _programLevels; }

            set
            {
                if (_programLevels != value)
                {
                    _programLevels = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgramAchievementDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgramAchievementDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgramAchievementLevelDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id = default!;
        private string? _name = default!;
        private int? _level = default!;
        private long? _condition = default!;
        private int? _awardPercent = default!;
        private int? _awardSum = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name
        {
            get { return _name; }

            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("level")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Level
        {
            get { return _level; }

            set
            {
                if (_level != value)
                {
                    _level = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("condition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? Condition
        {
            get { return _condition; }

            set
            {
                if (_condition != value)
                {
                    _condition = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("awardPercent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? AwardPercent
        {
            get { return _awardPercent; }

            set
            {
                if (_awardPercent != value)
                {
                    _awardPercent = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("awardSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? AwardSum
        {
            get { return _awardSum; }

            set
            {
                if (_awardSum != value)
                {
                    _awardSum = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgramAchievementLevelDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgramAchievementLevelDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgramAchievementRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _personId = default!;

        [System.Text.Json.Serialization.JsonPropertyName("personId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string PersonId
        {
            get { return _personId; }

            set
            {
                if (_personId != value)
                {
                    _personId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgramAchievementRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgramAchievementRequest>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgramAchievementResponse : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.ICollection<BonusProgramAchievementResponseItem>? _items = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<BonusProgramAchievementResponseItem>? Items
        {
            get { return _items; }

            set
            {
                if (_items != value)
                {
                    _items = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgramAchievementResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgramAchievementResponse>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgramAchievementResponseItem : System.ComponentModel.INotifyPropertyChanged
    {
        private BonusProgramAchievementDto? _bonusProgram = default!;
        private long? _currentSum = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bonusProgram")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public BonusProgramAchievementDto? BonusProgram
        {
            get { return _bonusProgram; }

            set
            {
                if (_bonusProgram != value)
                {
                    _bonusProgram = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("currentSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? CurrentSum
        {
            get { return _currentSum; }

            set
            {
                if (_currentSum != value)
                {
                    _currentSum = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgramAchievementResponseItem FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgramAchievementResponseItem>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgramDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id = default!;
        private string? _name = default!;
        private BonusProgramType? _bonusProgramType = default!;
        private string? _description = default!;
        private System.DateTimeOffset? _dateStart = default!;
        private System.DateTimeOffset? _dateStop = default!;
        private int? _bankId = default!;
        private string? _executionCron = default!;
        private FrequencyTypes? _frequencyType = default!;
        private int? _frequencyValue = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name
        {
            get { return _name; }

            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bonusProgramType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BonusProgramType? BonusProgramType
        {
            get { return _bonusProgramType; }

            set
            {
                if (_bonusProgramType != value)
                {
                    _bonusProgramType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("dateStart")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateStart
        {
            get { return _dateStart; }

            set
            {
                if (_dateStart != value)
                {
                    _dateStart = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("dateStop")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? DateStop
        {
            get { return _dateStop; }

            set
            {
                if (_dateStop != value)
                {
                    _dateStop = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("executionCron")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ExecutionCron
        {
            get { return _executionCron; }

            set
            {
                if (_executionCron != value)
                {
                    _executionCron = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("frequencyType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FrequencyTypes? FrequencyType
        {
            get { return _frequencyType; }

            set
            {
                if (_frequencyType != value)
                {
                    _frequencyType = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("frequencyValue")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? FrequencyValue
        {
            get { return _frequencyValue; }

            set
            {
                if (_frequencyValue != value)
                {
                    _frequencyValue = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgramDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgramDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgramLevel : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id = default!;
        private string? _name = default!;
        private System.DateTimeOffset? _lastUpdated = default!;
        private int? _level = default!;
        private int? _bonusProgramId = default!;
        private long? _condition = default!;
        private int? _awardPercent = default!;
        private int? _awardSum = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name
        {
            get { return _name; }

            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? LastUpdated
        {
            get { return _lastUpdated; }

            set
            {
                if (_lastUpdated != value)
                {
                    _lastUpdated = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("level")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Level
        {
            get { return _level; }

            set
            {
                if (_level != value)
                {
                    _level = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bonusProgramId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BonusProgramId
        {
            get { return _bonusProgramId; }

            set
            {
                if (_bonusProgramId != value)
                {
                    _bonusProgramId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// Условие срабатывания программы например общая сумма в рублях
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("condition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? Condition
        {
            get { return _condition; }

            set
            {
                if (_condition != value)
                {
                    _condition = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// Получаемая выгода при срабатывании например в процентах или бонусах
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("awardPercent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? AwardPercent
        {
            get { return _awardPercent; }

            set
            {
                if (_awardPercent != value)
                {
                    _awardPercent = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("awardSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? AwardSum
        {
            get { return _awardSum; }

            set
            {
                if (_awardSum != value)
                {
                    _awardSum = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgramLevel FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgramLevel>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgramLevelDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id = default!;
        private string? _name = default!;
        private int? _level = default!;
        private int? _bonusProgramId = default!;
        private long? _condition = default!;
        private int? _awardPercent = default!;
        private int? _awardSum = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name
        {
            get { return _name; }

            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("level")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Level
        {
            get { return _level; }

            set
            {
                if (_level != value)
                {
                    _level = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bonusProgramId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BonusProgramId
        {
            get { return _bonusProgramId; }

            set
            {
                if (_bonusProgramId != value)
                {
                    _bonusProgramId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("condition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? Condition
        {
            get { return _condition; }

            set
            {
                if (_condition != value)
                {
                    _condition = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("awardPercent")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? AwardPercent
        {
            get { return _awardPercent; }

            set
            {
                if (_awardPercent != value)
                {
                    _awardPercent = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("awardSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? AwardSum
        {
            get { return _awardSum; }

            set
            {
                if (_awardSum != value)
                {
                    _awardSum = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgramLevelDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgramLevelDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// &lt;p&gt;Содержит значения:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;0&lt;/i&gt; - заряжено Х кВт&lt;/li&gt;&lt;li&gt;&lt;i&gt;1&lt;/i&gt; - потрачено Х денег&lt;/li&gt;&lt;li&gt;&lt;i&gt;2&lt;/i&gt; - зарядка на Х разных станциях&lt;/li&gt;&lt;li&gt;&lt;i&gt;3&lt;/i&gt; - день рождения&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum BonusProgramType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ChargedByCapacity")]
        ChargedByCapacity = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ChargedByStations")]
        ChargedByStations = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SpendMoney")]
        SpendMoney = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Birthday")]
        Birthday = 3,

    }

    /// <summary>
    /// &lt;p&gt;Содержит значения:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;i&gt;0&lt;/i&gt; - С 1 числа месяца - поледниего числа месяца (включительно)&lt;/li&gt;&lt;li&gt;&lt;i&gt;1&lt;/i&gt; - С Понедельника по Воскресенье (включительно)&lt;/li&gt;&lt;li&gt;&lt;i&gt;2&lt;/i&gt; - Каждый календарный день&lt;/li&gt;&lt;/ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FrequencyTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Month")]
        Month = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Week")]
        Week = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Day")]
        Day = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetBalanceByBankIdRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _personId = default!;
        private int _bankId = default!;

        [System.Text.Json.Serialization.JsonPropertyName("personId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string PersonId
        {
            get { return _personId; }

            set
            {
                if (_personId != value)
                {
                    _personId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetBalanceByBankIdRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GetBalanceByBankIdRequest>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPersonBalanceRequest : System.ComponentModel.INotifyPropertyChanged
    {
        private string _personId = default!;

        [System.Text.Json.Serialization.JsonPropertyName("personId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string PersonId
        {
            get { return _personId; }

            set
            {
                if (_personId != value)
                {
                    _personId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetPersonBalanceRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GetPersonBalanceRequest>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GetPersonBalanceResponseDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Collections.Generic.ICollection<BalanceResponseItemDto>? _items = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<BalanceResponseItemDto>? Items
        {
            get { return _items; }

            set
            {
                if (_items != value)
                {
                    _items = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GetPersonBalanceResponseDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GetPersonBalanceResponseDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnerByPayDto : System.ComponentModel.INotifyPropertyChanged
    {
        private int _id = default!;
        private int? _ownerId = default!;
        private int? _maxBonusPayPercentages = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? OwnerId
        {
            get { return _ownerId; }

            set
            {
                if (_ownerId != value)
                {
                    _ownerId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("maxBonusPayPercentages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? MaxBonusPayPercentages
        {
            get { return _maxBonusPayPercentages; }

            set
            {
                if (_maxBonusPayPercentages != value)
                {
                    _maxBonusPayPercentages = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OwnerByPayDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OwnerByPayDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OwnerMaxBonusPay : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id = default!;
        private int _ownerId = default!;
        private int? _maxBonusPayPercentages = default!;
        private System.DateTimeOffset? _lastUpdated = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// ID owner в другой базе данных
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int OwnerId
        {
            get { return _ownerId; }

            set
            {
                if (_ownerId != value)
                {
                    _ownerId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// Максимальный размер оплаты бонусами в процентах
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maxBonusPayPercentages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.Range(0, 100)]
        public int? MaxBonusPayPercentages
        {
            get { return _maxBonusPayPercentages; }

            set
            {
                if (_maxBonusPayPercentages != value)
                {
                    _maxBonusPayPercentages = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? LastUpdated
        {
            get { return _lastUpdated; }

            set
            {
                if (_lastUpdated != value)
                {
                    _lastUpdated = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OwnerMaxBonusPay FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OwnerMaxBonusPay>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayManualRequestDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _personId = default!;
        private int _bankId = default!;
        private long _bonusSum = default!;
        private string _description = default!;
        private string _transactionId = default!;

        [System.Text.Json.Serialization.JsonPropertyName("personId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string PersonId
        {
            get { return _personId; }

            set
            {
                if (_personId != value)
                {
                    _personId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bonusSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long BonusSum
        {
            get { return _bonusSum; }

            set
            {
                if (_bonusSum != value)
                {
                    _bonusSum = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string TransactionId
        {
            get { return _transactionId; }

            set
            {
                if (_transactionId != value)
                {
                    _transactionId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PayManualRequestDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PayManualRequestDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayRequestDto : System.ComponentModel.INotifyPropertyChanged
    {
        private string _personId = default!;
        private int _bankId = default!;
        private long _payment = default!;
        private string _description = default!;
        private string _transactionId = default!;
        private System.Guid _ezsId = default!;
        private int _ownerId = default!;
        private string? _userName = default!;

        [System.Text.Json.Serialization.JsonPropertyName("personId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string PersonId
        {
            get { return _personId; }

            set
            {
                if (_personId != value)
                {
                    _personId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
        public int BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("payment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long Payment
        {
            get { return _payment; }

            set
            {
                if (_payment != value)
                {
                    _payment = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public string TransactionId
        {
            get { return _transactionId; }

            set
            {
                if (_transactionId != value)
                {
                    _transactionId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("ezsId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.ComponentModel.DataAnnotations.Required]
        public System.Guid EzsId
        {
            get { return _ezsId; }

            set
            {
                if (_ezsId != value)
                {
                    _ezsId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("ownerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        public int OwnerId
        {
            get { return _ownerId; }

            set
            {
                if (_ownerId != value)
                {
                    _ownerId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("userName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? UserName
        {
            get { return _userName; }

            set
            {
                if (_userName != value)
                {
                    _userName = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PayRequestDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PayRequestDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604