//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"

namespace BonusApi
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IBonusClient
    {
        /// <summary>
        /// Начисление бонусных баллов оператором
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseEmpty> ApiAccrualManualAsync(AccrualManualDto transaction);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Начисление бонусных баллов оператором
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseEmpty> ApiAccrualManualAsync(AccrualManualDto transaction, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Начисление бонусных баллов сервисом оплаты
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseEmpty> ApiPayAsync(PayDto transaction);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Начисление бонусных баллов сервисом оплаты
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseEmpty> ApiPayAsync(PayDto transaction, System.Threading.CancellationToken cancellationToken);

        /// <summary>
        /// Списание бонусных баллов оператором
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseEmpty> ApiPayManualAsync(PayManualDto transaction);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Списание бонусных баллов оператором
        /// </summary>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseEmpty> ApiPayManualAsync(PayManualDto transaction, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgramOf> ApiBonusProgramGetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgramOf> ApiBonusProgramGetAsync(System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgram> ApiBonusProgramPostAsync(BonusProgram model);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgram> ApiBonusProgramPostAsync(BonusProgram model, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgram> ApiBonusProgramPutAsync(BonusProgram model);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgram> ApiBonusProgramPutAsync(BonusProgram model, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgram> ApiBonusProgramGetAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgram> ApiBonusProgramGetAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseEmpty> ApiBonusProgramDeleteAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseEmpty> ApiBonusProgramDeleteAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgramLevelOf> ApiBonusProgramLevelGetAsync();

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgramLevelOf> ApiBonusProgramLevelGetAsync(System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgramLevel> ApiBonusProgramLevelPostAsync(BonusProgramLevel model);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgramLevel> ApiBonusProgramLevelPostAsync(BonusProgramLevel model, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgramLevel> ApiBonusProgramLevelPutAsync(BonusProgramLevel model);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgramLevel> ApiBonusProgramLevelPutAsync(BonusProgramLevel model, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgramLevel> ApiBonusProgramLevelGetAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseOfBonusProgramLevel> ApiBonusProgramLevelGetAsync(int id, System.Threading.CancellationToken cancellationToken);

        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseEmpty> ApiBonusProgramLevelDeleteAsync(int id);

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BaseResponseEmpty> ApiBonusProgramLevelDeleteAsync(int id, System.Threading.CancellationToken cancellationToken);

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResponseEmpty : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _statusCode = default!;
        private string? _statusDescription = default!;

        /// <summary>
        /// Результат выполнения метода
        /// <br/>0 - OK
        /// <br/>1 - критическая ошибка
        /// <br/>2 - штатная ошибка - полученный ответ не следует использовать
        /// <br/>            
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? StatusCode
        {
            get { return _statusCode; }

            set
            {
                if (_statusCode != value)
                {
                    _statusCode = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// Описание результата (отсутствует, если StatusCode 0)
        /// <br/>            
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StatusDescription
        {
            get { return _statusDescription; }

            set
            {
                if (_statusDescription != value)
                {
                    _statusDescription = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BaseResponseEmpty FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BaseResponseEmpty>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccrualManualDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _personId = default!;
        private int? _bankId = default!;
        private int? _sum = default!;
        private string? _description = default!;
        private System.Guid? _transactionId = default!;
        private System.Guid? _userId = default!;

        [System.Text.Json.Serialization.JsonPropertyName("personId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? PersonId
        {
            get { return _personId; }

            set
            {
                if (_personId != value)
                {
                    _personId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("sum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Sum
        {
            get { return _sum; }

            set
            {
                if (_sum != value)
                {
                    _sum = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? TransactionId
        {
            get { return _transactionId; }

            set
            {
                if (_transactionId != value)
                {
                    _transactionId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? UserId
        {
            get { return _userId; }

            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AccrualManualDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AccrualManualDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _personId = default!;
        private int? _bankId = default!;
        private int? _sum = default!;
        private string? _description = default!;
        private System.Guid? _transactionId = default!;
        private int? _ezsId = default!;

        [System.Text.Json.Serialization.JsonPropertyName("personId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? PersonId
        {
            get { return _personId; }

            set
            {
                if (_personId != value)
                {
                    _personId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("sum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Sum
        {
            get { return _sum; }

            set
            {
                if (_sum != value)
                {
                    _sum = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? TransactionId
        {
            get { return _transactionId; }

            set
            {
                if (_transactionId != value)
                {
                    _transactionId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("ezsId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? EzsId
        {
            get { return _ezsId; }

            set
            {
                if (_ezsId != value)
                {
                    _ezsId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PayDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PayDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PayManualDto : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _personId = default!;
        private int? _bankId = default!;
        private int? _sum = default!;
        private string? _description = default!;
        private System.Guid? _transactionId = default!;
        private System.Guid? _userId = default!;

        [System.Text.Json.Serialization.JsonPropertyName("personId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? PersonId
        {
            get { return _personId; }

            set
            {
                if (_personId != value)
                {
                    _personId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("sum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Sum
        {
            get { return _sum; }

            set
            {
                if (_sum != value)
                {
                    _sum = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("transactionId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? TransactionId
        {
            get { return _transactionId; }

            set
            {
                if (_transactionId != value)
                {
                    _transactionId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("userId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? UserId
        {
            get { return _userId; }

            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PayManualDto FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PayManualDto>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResponseOfBonusProgramOf : BaseResponseEmpty
    {
        private System.Collections.Generic.ICollection<BonusProgram>? _data = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<BonusProgram>? Data
        {
            get { return _data; }

            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BaseResponseOfBonusProgramOf FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BaseResponseOfBonusProgramOf>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgram : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id = default!;
        private string? _name = default!;
        private ProgramTypes? _programTypes = default!;
        private string? _description = default!;
        private System.DateTimeOffset? _activeFrom = default!;
        private System.DateTimeOffset? _activeTo = default!;
        private System.Collections.Generic.ICollection<Transaction>? _programLevels = default!;
        private bool? _isDeleted = default!;
        private System.DateTimeOffset? _lastUpdated = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name
        {
            get { return _name; }

            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("programTypes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ProgramTypes? ProgramTypes
        {
            get { return _programTypes; }

            set
            {
                if (_programTypes != value)
                {
                    _programTypes = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("activeFrom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActiveFrom
        {
            get { return _activeFrom; }

            set
            {
                if (_activeFrom != value)
                {
                    _activeFrom = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("activeTo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset? ActiveTo
        {
            get { return _activeTo; }

            set
            {
                if (_activeTo != value)
                {
                    _activeTo = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("programLevels")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<Transaction>? ProgramLevels
        {
            get { return _programLevels; }

            set
            {
                if (_programLevels != value)
                {
                    _programLevels = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("isDeleted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsDeleted
        {
            get { return _isDeleted; }

            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? LastUpdated
        {
            get { return _lastUpdated; }

            set
            {
                if (_lastUpdated != value)
                {
                    _lastUpdated = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgram FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgram>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ProgramTypes
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PeriodicalMonthlySumByLevels")]
        PeriodicalMonthlySumByLevels = 0,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Transaction : System.ComponentModel.INotifyPropertyChanged
    {
        private System.Guid? _id = default!;
        private int? _personId = default!;
        private System.DateTimeOffset? _lastUpdated = default!;
        private int? _bankId = default!;
        private long? _bonusBase = default!;
        private int? _bonusSum = default!;
        private int? _programId = default!;
        private BonusProgram? _program = default!;
        private System.Guid? _userId = default!;
        private string? _description = default!;
        private int? _ezsId = default!;
        private TransactionType? _type = default!;

        /// <summary>
        /// Также является ключом идемпотентности
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("personId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? PersonId
        {
            get { return _personId; }

            set
            {
                if (_personId != value)
                {
                    _personId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? LastUpdated
        {
            get { return _lastUpdated; }

            set
            {
                if (_lastUpdated != value)
                {
                    _lastUpdated = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// Тип валюты
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bankId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BankId
        {
            get { return _bankId; }

            set
            {
                if (_bankId != value)
                {
                    _bankId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// База (например денежная сумма) с которой был начислен бонус 0 для ручных начислений
        /// <br/>            
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bonusBase")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? BonusBase
        {
            get { return _bonusBase; }

            set
            {
                if (_bonusBase != value)
                {
                    _bonusBase = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bonusSum")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? BonusSum
        {
            get { return _bonusSum; }

            set
            {
                if (_bonusSum != value)
                {
                    _bonusSum = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("programId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ProgramId
        {
            get { return _programId; }

            set
            {
                if (_programId != value)
                {
                    _programId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("program")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public BonusProgram? Program
        {
            get { return _program; }

            set
            {
                if (_program != value)
                {
                    _program = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// Id оператора который произвел начисления в случаи если null то начисленно автоматом
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("userId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Guid? UserId
        {
            get { return _userId; }

            set
            {
                if (_userId != value)
                {
                    _userId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description
        {
            get { return _description; }

            set
            {
                if (_description != value)
                {
                    _description = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// Заправка при расплате за которую списались бонусы. Если null то происходило списание в ручную либо по иным причинам например сгорели бонусы.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ezsId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? EzsId
        {
            get { return _ezsId; }

            set
            {
                if (_ezsId != value)
                {
                    _ezsId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public TransactionType? Type
        {
            get { return _type; }

            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Transaction FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Transaction>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum TransactionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Manual")]
        Manual = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Payment")]
        Payment = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Auto")]
        Auto = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResponseOfBonusProgram : BaseResponseEmpty
    {
        private BonusProgram? _data = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public BonusProgram? Data
        {
            get { return _data; }

            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BaseResponseOfBonusProgram FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BaseResponseOfBonusProgram>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResponseOfBonusProgramLevelOf : BaseResponseEmpty
    {
        private System.Collections.Generic.ICollection<BonusProgramLevel>? _data = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<BonusProgramLevel>? Data
        {
            get { return _data; }

            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BaseResponseOfBonusProgramLevelOf FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BaseResponseOfBonusProgramLevelOf>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BonusProgramLevel : System.ComponentModel.INotifyPropertyChanged
    {
        private int? _id = default!;
        private string? _name = default!;
        private bool? _isDeleted = default!;
        private System.DateTimeOffset? _lastUpdated = default!;
        private int? _level = default!;
        private int? _programId = default!;
        private BonusProgram? _bonusProgram = default!;
        private long? _condition = default!;
        private int? _benefit = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Id
        {
            get { return _id; }

            set
            {
                if (_id != value)
                {
                    _id = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("name")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Name
        {
            get { return _name; }

            set
            {
                if (_name != value)
                {
                    _name = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("isDeleted")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsDeleted
        {
            get { return _isDeleted; }

            set
            {
                if (_isDeleted != value)
                {
                    _isDeleted = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdated")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTimeOffset? LastUpdated
        {
            get { return _lastUpdated; }

            set
            {
                if (_lastUpdated != value)
                {
                    _lastUpdated = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("level")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Level
        {
            get { return _level; }

            set
            {
                if (_level != value)
                {
                    _level = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("programId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ProgramId
        {
            get { return _programId; }

            set
            {
                if (_programId != value)
                {
                    _programId = value;
                    RaisePropertyChanged();
                }
            }
        }

        [System.Text.Json.Serialization.JsonPropertyName("bonusProgram")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public BonusProgram? BonusProgram
        {
            get { return _bonusProgram; }

            set
            {
                if (_bonusProgram != value)
                {
                    _bonusProgram = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// Условие срабатывания программы например общая сумма в рублях
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("condition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? Condition
        {
            get { return _condition; }

            set
            {
                if (_condition != value)
                {
                    _condition = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>
        /// Получаемая выгода при срабатывании например в процентах или бонусах
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("benefit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Benefit
        {
            get { return _benefit; }

            set
            {
                if (_benefit != value)
                {
                    _benefit = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BonusProgramLevel FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BonusProgramLevel>(data, options);

        }

        public event System.ComponentModel.PropertyChangedEventHandler? PropertyChanged;

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string? propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BaseResponseOfBonusProgramLevel : BaseResponseEmpty
    {
        private BonusProgramLevel? _data = default!;

        [System.Text.Json.Serialization.JsonPropertyName("data")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public BonusProgramLevel? Data
        {
            get { return _data; }

            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static BaseResponseOfBonusProgramLevel FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<BaseResponseOfBonusProgramLevel>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTimeOffset>
    {
        public override System.DateTimeOffset Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTimeOffset.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTimeOffset value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.0.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604